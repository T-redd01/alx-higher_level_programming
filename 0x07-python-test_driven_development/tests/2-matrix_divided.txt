======================================
test for dividing elements of a matrix
======================================

Testing cases of dividing elements of a matrix of function ``matrix_divided``

Corect return value
===================

should return  a matrix with all elements divided by div

::

	>>> matrix_divided = __import__("2-matrix_divided").matrix_divided
	>>> mat1 = [[2, 4, 6, 8], [20, 30, 40, 50]]
	>>> matrix_divided(mat1, 2)
	[[1.0, 2.0, 3.0, 4.0], [10.0, 15.0, 20.0, 25.0]]
	>>> matrix_divided(mat1, 1)
	[[2.0, 4.0, 6.0, 8.0], [20.0, 30.0, 40.0, 50.0]]
	>>> res = matrix_divided(mat1, 5)
	>>> print(res)
	[[0.4, 0.8, 1.2, 1.6], [4.0, 6.0, 8.0, 10.0]]
	>>> print(mat1)
	[[2, 4, 6, 8], [20, 30, 40, 50]]

Lists of lists
==============

must be a list of lists

::

	>>> matrix_divided = __import__("2-matrix_divided").matrix_divided
	>>> matrix_divided("str", 0)
	Traceback (innermost last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats
	>>> matrix_divided([[1,2,3], "str"], 1)
	Traceback (innermost last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats
	>>> matrix_divided([2, [2, 1, 2]], 1)
	Traceback (innermost last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats
	>>> matrix_divided([2,2.3], 1)
	Traceback (innermost last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats
	>>> ret = matrix_divided([[1,2,3], [4,5,6]], 1)

Elements types check
====================

elements must be either float or int type

::

	>>> matrix_divided = __import__("2-matrix_divided").matrix_divided
	>>> matrix_divided([[1,"ll",3],["ll", [1,2,3], (2,3)]], 1)
	Traceback (innermost last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats
	>>> matrix_divided([[1, 2, 3], [4, 5, "6"]], 1)
	Traceback (innermost last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Row sizes
=========

each row of matrix must be same size

::

	>>> matrix_divided = __import__("2-matrix_divided").matrix_divided
	>>> matrix_divided([[1, 2, 3], [1,2]], 1)
	Traceback (innermost last):
	TypeError: Each row of the matrix must have the same size
	>>> matrix_divided([[1], [1, 2]], 1)
	Traceback (innermost last):
	TypeError: Each row of the matrix must have the same size

Divisor type check
==================

Divisor / div parameter must be int or float

::

	>>> matrix_divided = __import__("2-matrix_divided").matrix_divided
	>>> matrix_divided([[1], [1]], [5])
	Traceback (innermost last):
	TypeError: div must be a number
	>>> matrix_divided([[1], [1]], "8")
	Traceback (innermost last):
	TypeError: div must be a number

Divisor value check
===================

Divisor / div parameter must not be 0

::

	>>> matrix_divided = __import__("2-matrix_divided").matrix_divided
	>>> matrix_divided([[1], [2]], 0)
	Traceback (innermost last):
	ZeroDivisionError: division by zero

Success cases
=============

must return new matrix with elements divided to 2 decimal places

::

	>>> matrix_divided = __import__("2-matrix_divided").matrix_divided
	>>> mat1 = [[1,2,3], [4,5,6]]
	>>> matrix_divided(mat1, 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
	>>> print(mat1)
	[[1, 2, 3], [4, 5, 6]]
